"""Make enquiry_id primary key and remove id column

Revision ID: c778ded3af34
Revises: 62d824b04f30
Create Date: 2025-09-14 00:12:05.043530

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'c778ded3af34'
down_revision = '62d824b04f30'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('b2c_lead', schema=None) as batch_op:
        batch_op.drop_index('ix_b2c_lead_enquiry_id')
        batch_op.drop_column('id')

    # First, drop the existing foreign key constraint by recreating the table
    op.execute('PRAGMA foreign_keys=off')
    op.execute('''
        CREATE TABLE follow_up_new (
            id INTEGER NOT NULL,
            lead_type VARCHAR(4) NOT NULL,
            b2c_lead_id VARCHAR(20),
            b2b_lead_id INTEGER,
            follow_up_on DATE NOT NULL,
            notes TEXT,
            outcome VARCHAR(15) NOT NULL,
            next_follow_up_on DATE,
            created_at DATETIME,
            updated_at DATETIME,
            owner_id INTEGER NOT NULL,
            PRIMARY KEY (id),
            FOREIGN KEY(owner_id) REFERENCES user (id),
            FOREIGN KEY(b2c_lead_id) REFERENCES b2c_lead (enquiry_id),
            FOREIGN KEY(b2b_lead_id) REFERENCES b2b_lead (id),
            CHECK (b2c_lead_id IS NOT NULL AND b2b_lead_id IS NULL OR b2c_lead_id IS NULL AND b2b_lead_id IS NOT NULL)
        )
    ''')
    op.execute('INSERT INTO follow_up_new SELECT * FROM follow_up')
    op.execute('DROP TABLE follow_up')
    op.execute('ALTER TABLE follow_up_new RENAME TO follow_up')
    op.execute('PRAGMA foreign_keys=on')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Recreate follow_up table with original structure
    op.execute('PRAGMA foreign_keys=off')
    op.execute('''
        CREATE TABLE follow_up_old (
            id INTEGER NOT NULL,
            lead_type VARCHAR(4) NOT NULL,
            b2c_lead_id INTEGER,
            b2b_lead_id INTEGER,
            follow_up_on DATE NOT NULL,
            notes TEXT,
            outcome VARCHAR(15) NOT NULL,
            next_follow_up_on DATE,
            created_at DATETIME,
            updated_at DATETIME,
            owner_id INTEGER NOT NULL,
            PRIMARY KEY (id),
            FOREIGN KEY(owner_id) REFERENCES user (id),
            FOREIGN KEY(b2c_lead_id) REFERENCES b2c_lead (id),
            FOREIGN KEY(b2b_lead_id) REFERENCES b2b_lead (id),
            CHECK (b2c_lead_id IS NOT NULL AND b2b_lead_id IS NULL OR b2c_lead_id IS NULL AND b2b_lead_id IS NOT NULL)
        )
    ''')
    op.execute('INSERT INTO follow_up_old SELECT * FROM follow_up')
    op.execute('DROP TABLE follow_up')
    op.execute('ALTER TABLE follow_up_old RENAME TO follow_up')
    op.execute('PRAGMA foreign_keys=on')

    with op.batch_alter_table('b2c_lead', schema=None) as batch_op:
        batch_op.add_column(sa.Column('id', sa.INTEGER(), nullable=False))
        batch_op.create_index('ix_b2c_lead_enquiry_id', ['enquiry_id'], unique=1)

    # ### end Alembic commands ###
